kind: ConfigMap
apiVersion: v1
metadata:
  name: nginx-config-20200925
  namespace: dispute
data:
  nginx.conf: |
    user  nginx;
    worker_processes  auto; 

    worker_rlimit_nofile    65536;
    pid        /var/run/nginx.pid;
    error_log  /var/log/nginx/error.log error;

    events
    {
        use epoll;  # 复用客户端线程的轮询方法
        accept_mutex off;
        worker_connections  65536;
    }
    
    
    http
    {
        include       mime.types;
        default_type  text/html;
        access_log  /var/log/nginx/access.log;

        sendfile    on;  # 减少切换次数和拷贝次数
        tcp_nopush on; # 告诉nginx在一个数据包里发送所有头文件
        tcp_nodelay on; 
      
        server_tokens off; # 隐藏Nginx版本号
        #limit_req_zone $binary_remote_addr zone=allips:10m rate=500r/s; # 限制同一个ip每秒限制500个请求
        #limit_req zone=allips burst=30 nodelay;	#
      
        keepalive_timeout  60;  # 超时时间
        keepalive_requests	10000;  # 长连接请求最大数
        #client_body_timeout 15;  # 客户端与服务端建立连接后发送 request body 的超时时间，超时发送408，默认60
        #client_header_timeout 15;  # 客户端向服务端发送一个完整的 request header 的超时时间，超时发送408，默认60
        send_timeout 15;

        client_header_buffer_size 4k;
        client_body_buffer_size 320k;
        client_max_body_size	 300m;
        large_client_header_buffers 4 32k;
        server_names_hash_bucket_size 128; 
    
        open_file_cache max=65536  inactive=20s;
        open_file_cache_valid      80s;
        open_file_cache_min_uses   1;

        proxy_connect_timeout 300s;
        proxy_read_timeout 300s;
        proxy_send_timeout 300s;
        proxy_buffer_size 64k;
        proxy_buffers  4 32k;
        proxy_busy_buffers_size 64k;
        proxy_temp_file_write_size 64k;
        proxy_ignore_client_abort on;
        #proxy_temp_path  /tmp/nginx/temp;
        #proxy_cache_path /tmp/nginx/cache levels=1:2 keys_zone=cache_one:1024m inactive=1d max_size=2g;
        #proxy_cache cache_one;    # 控制后台是否缓存
        proxy_cache_valid 200 302 5m;
        proxy_cache_valid 301 1m;
        add_header X-Cache-Status $upstream_cache_status;
      
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_http_version 1.1;
        proxy_set_header Connection "";

        #fastcgi_temp_path  /tmp/fastcgi_temp; # php缓存配置
        #fastcgi_cache_path /tmp/fastcgi_cache levels=1:2 keys_zone=cache_fastcgi:128m inactive=30m max_size=1g;
        fastcgi_cache_key $request_method://$host$request_uri;
        fastcgi_cache_valid 200 302 5m;
        fastcgi_cache_valid 301     1m;
        fastcgi_cache_valid any     1m;
        fastcgi_cache_min_uses 1;
        fastcgi_cache_use_stale error timeout http_500 http_503 invalid_header;
    
        gzip  on;
        gzip_vary on;
        gzip_min_length 1k;   # 指定压缩文件的最小尺寸
        gzip_buffers  16 8k;
        gzip_http_version 1.1;
        gzip_comp_level 6;  # 压缩等级
        gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript image/png image/jpeg;  # 允许压缩的文件类型
        gzip_disable "MSIE [1-6]\.";
    
        charset UTF-8;
      
      
      server {
          listen                    8001;
          server_name               test;

          # location  / {
          # root                      /home/wwwroot/pg-dispute-wechat-test;
          # index                     index.html;
          #     }
          location ^~ / {
          root   /usr/share/nginx/html;
          index  index.html index.htm;
              }
          location  /service-core/ {
            proxy_set_header  Host  $http_host;
            proxy_set_header  X-Real-IP  $remote_addr;
            proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_pass 	http://service-core:9001/;
          }
      } 

      server {
          listen                    80;
          server_name               localhost;

          location ^~ / {
          root   /usr/share/nginx/html;
          index  index.html index.htm;
              }
      }
      }
