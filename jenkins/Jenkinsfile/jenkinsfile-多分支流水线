pipeline {

  // 多分支构建参数
  parameters {
     choice(name: 'NODE', choices: ['mmp'], description: 'slave节点：mmp: maven npm环境')
     choice(name: 'ENV_TYPE', choices: ['dev', 'test'], description: '部署环境： dev：开发环境；test：测试环境')
     string(name: 'PROJECT_URL',defaultValue: 'https://gitee.com/zhangyudd/aliyun-interface.git', description: '项目仓库地址')
     gitParameter(name: 'BRANCH_TAG', type: 'PT_BRANCH_TAG', defaultValue: 'master', branchFilter: '',selectedValue: 'DEFAULT', useRepository: "${params.PROJECT_URL}", sortMode: 'DESCENDING_SMART', description: '选择要项目的分支或Tag')
  }

  agent{
    label "${params.NODE}"   
    // agent any
  }

  // 环境变量
  environment{
    // 镜像仓库地址
    def registry = "registry.cn-beijing.aliyuncs.com"
    // 镜像仓库命名空间
    def namespace = "pingtai"
    // 镜像仓库项目
    def project = "core-test"
    // 镜像完整名称
    def image_name = "${registry}/${namespace}/${project}:${JOB_NAME}-${BUILD_ID}"
    // jenkins中配置的 git 仓库密钥
    def git_key = 'xxxxx-xxxxxxx-xxxx-xxxxc'
  	// jenkins中配置的 docker 仓库密钥（dockerfile上传到项目仓库）
    def dockerhub_key = 'xxxxx-xxxxxxx-xxxx-xxxxc'	
	  // jenkins中配置的k8s连接config
    def k8s_config = 'xxxxx-xxxxxxx-xxxx-xxxxc'		
	  // k8s 部署文件名（部署文件上传到项目仓库）
	  def dp_file = 'core-test-dp.yaml'
  } 

  // gitlab 触发器钩子
  // triggers { 
  // gitlab( triggerOnPush: true, triggerOnMergeRequest: false, triggerOpenMergeRequestOnPush: "never", triggerOnNoteRequest: true, noteRegex: "Jenkins please retry a build", skipWorkInProgressMergeRequest: true, ciSkip: false, setBuildDescription: true, addNoteOnMergeRequest: true, addCiMessage: true, addVoteOnMergeRequest: true, acceptMergeRequestOnSuccess: false, branchFilterType: "NameBasedFilter", includeBranchesSpec: "release/qat", excludeBranchesSpec: "", pendingBuildName: "Jenkins", cancelPendingBuildsOnUpdate: false, secretToken: "abcdefghijklmnopqrstuvwxyz0123456789ABCDEF") 
  // }
  triggers {
    gitlab(triggerOnPush: true, triggerOnMergeRequest: false, branchFilterType: "NameBasedFilter", includeBranchesSpec: "test")
  }

  stages {
    stage('参数输出') {
     steps {
       sh '''
       echo "构建node ${params.NODE}"
	     echo "部署环境 ${params.ENV_TYPE}"
       echo "项目仓库 ${params.PROJECT_URL} 项目分支 ${params.BRANCH_TAG}"
	     echo "docker镜像名 ${image_name}"
       '''
     }
    }
    stage('git pull') {
      failFast true  // 所有并行阶段中的某个失败的时候，中止其他阶段
      steps {
        sh """
          [ -n "${params.BRANCH_TAG}" ] || { echo -e "branch ${params.BRANCH_TAG} not found" && exit 11; }
        """
        script{
          BRANCH_TAG = sh(returnStdout: true,script: "echo ${params.BRANCH_TAG}|awk -F '/' '{print \$NF}'").trim()
        }
        cleanWs()
        git branch: "${params.BRANCH_TAG}", credentialsId: "${git_key}", url: "${params.PROJECT_URL}"
     }
    }
    stage('docker build'){
      // 容器打包构建
      steps {
        withCredentials([usernamePassword(credentialsId: "${dockerhub_key}", passwordVariable: 'password', usernameVariable: 'username')]) {
        sh """
          docker build -t ${image_name} .
          docker login -u ${username} -p '${password}' ${registry}
          docker push ${image_name}
        """
        // 清理多个镜像
        // sh 'docker images | grep $project | awk \'NR<5{print $1":"$2}\' | xargs docker rmi '
        }
      }
    }
    stage('deploy-k8s'){
      // 远程部署项目    
        steps {
          withCredentials([file(credentialsId: "k8s_config",variable:"vault")]) {
           sh """
           if [ ! -d ~/.kube ];then
               mkdir ~/.kube
            fi
           echo $vault| xargs cat > ~/.kube/config
		   sed -i 's@IMAGE_NAME@${image_name}@g' ${dp_file}
           kubectl apply -f ${dp_file}
           """
          }
      }
    } 	
  }

  post {
          failure {
              emailext (
                  subject: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                  body: """
				      FAILED: '${env.JOB_NAME} [${env.BUILD_NUMBER}]':
                      "${env.BUILD_URL}" 
					  """,
                  to: "edgar.z@foxmail.com",
                  from: "linuxzhangyu@163.com"
              )
          }
      }

}
