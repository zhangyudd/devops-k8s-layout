pipeline {

  // 多分支构建参数
  parameters {
    string(name: 'PROJECT_NAME',
        defaultValue: 'service-core',
        description: '项目名称')

    choice(name: 'NODE', 
        choices: ['mmp'], 
        description: 'slave节点：mmp: maven npm环境')

    choice(name: 'ENV_TYPE', 
        choices: ['dev', 'test'], 
        description: '部署环境： dev：开发环境；test：测试环境')

    string(name: 'PROJECT_URL',
        defaultValue: 'https://gitee.com/zhangyudd/test-0325.git', 
        description: '项目仓库地址')

    gitParameter name: 'BRANCH_TAG', 
        type: 'PT_BRANCH_TAG',
        branchFilter: 'origin/(.*)',
        defaultValue: 'master',
        selectedValue: 'DEFAULT',
        sortMode: 'DESCENDING_SMART',
        description: 'Select your branch or tag.'
  }

  agent{
    label "${params.NODE}"   
    // agent any
  }

  // 环境变量
  environment{
    // DOCKER镜像仓库地址
    def registry = "registry.cn-beijing.aliyuncs.com"
    // DOCKER镜像仓库命名空间
    def namespace = "pingtai"
    // DOCKER镜像仓库项目
    def project = "core-test"
    // DOCKER镜像完整名称
    def image_name = "${registry}/${namespace}/${project}:${JOB_NAME}-${BUILD_ID}"

    // jenkins中配置的 git 仓库密钥
    def git_key = 'xxxxx-xxxxxxx-xxxx-xxxxc'

  	// jenkins中配置的 docker 仓库密钥（dockerfile上传到项目仓库）
    def dockerhub_key = 'xxxxx-xxxxxxx-xxxx-xxxxc'	

	  // jenkins中配置的k8s连接config
    def k8s_config = 'xxxxx-xxxxxxx-xxxx-xxxxc'		
    
	  // k8s 部署文件名（部署文件上传到项目仓库）
	  def dp_file = 'core-test-dp.yaml'
  } 

  stages {
    stage('参数输出') {
     steps {
       sh """
	     echo "项目名称 ${params.PROJECT_NAME}"
         echo "构建node ${params.NODE}"
	     echo "部署环境 ${params.ENV_TYPE}"
         echo "项目仓库 ${params.PROJECT_URL} 项目分支 ${params.BRANCH_TAG}"
	     echo "docker镜像名 ${image_name}"
       """
     }
    }
	
    stage('git pull') {
      // failFast true  // 所有并行阶段中的某个失败的时候，中止其他阶段
      steps {
        // sh """
        //   [ -n "${params.BRANCH_TAG}" ] || { echo -e "branch ${params.BRANCH_TAG} not found" && exit 11; }
        // """
        script{
          BRANCH_TAG = sh(returnStdout: true,script: "echo ${params.BRANCH_TAG}|awk -F '/' '{print \$NF}'").trim()
        }
        cleanWs()
        git branch: "${params.BRANCH_TAG}",url: "${params.PROJECT_URL}"
     }
    }
	
    stage('docker build'){
      // 容器打包构建
      steps {
        withCredentials([usernamePassword(credentialsId: "${dockerhub_key}", passwordVariable: 'password', usernameVariable: 'username')]) {
        sh """
          docker build -t ${image_name} .
          docker login -u ${username} -p '${password}' ${registry}
          docker push ${image_name}
        """
        // 清理多个镜像
        // sh 'docker images | grep $project | awk \'NR<5{print $1":"$2}\' | xargs docker rmi '
        }
      }
    }	
	
	stage('build'){
       parallel {
	     stage('deploy test'){
		   when {
			   expression { BRANCH_TAG ==~ /(test)/ }
		   }
		   steps{
		     sh """
		     echo "test"
		     """
		   }
		 }
	     stage('deploy pro'){
		   when {
			   expression { BRANCH_TAG ==~ /(pro)/ }
		   }
		   steps{
		     sh """
		     echo "pro"
		     """
		   }
		 }		 
	   }
	}
  }

}
